--CREACION DE LAS TABLAS--

--TABLA ESTUDIANTES--
CREATE TABLE ESTUDIANTES(
	CARNET_ESTUDIANTE varchar(10) CONSTRAINT PK_ESTUDIANTES PRIMARY KEY,
	NOMBRE_ESTUDIANTE varchar(20) NOT NULL,
	PRIMER_APELLIDO_E varchar(20) NOT NULL,
	SEGUNDO_APELLIDO_E varchar(20) NOT NULL,
	CEDULA_E varchar(10) UNIQUE NOT NULL,
	TELEFONO_E varchar(10) NOT NULL,
	EMAIL_E varchar(30) NULL,
	DIRECCION_E varchar(100) NOT NULL,
	PROVINCIA_E varchar(20) NOT NULL,
	CANTON_E varchar(20) NOT NULL,
	DISTRITO_E varchar(20) NOT NULL,
	BORRADO_E BIT DEFAULT 0 NOT NULL
);

--TABLA MATRICULA--
CREATE TABLE MATRICULA(
	NUM_RECIBO bigint CONSTRAINT PK_MATRICULA PRIMARY KEY NOT NULL,
	CARNET_ESTUDIANTE varchar (10) CONSTRAINT FK_MATRICULAS FOREIGN KEY REFERENCES ESTUDIANTES(CARNET_ESTUDIANTE) NOT NULL,
	FECHA date DEFAULT getdate() NOT NULL,
	MONTO DECIMAL(10,2) NOT NULL,
	DESCUENTO DECIMAL(10,2) NOT NULL,
	ESTADO_M varchar(4) CONSTRAINT CK_ESTADO CHECK(ESTADO_M IN('ACT', 'INAC',upper(ESTADO_M))) DEFAULT 'ACT' NOT NULL,
	BORRADO_M BIT DEFAULT 0 NOT NULL
); 
	

--TABLA MODULOS--
CREATE TABLE MODULOS(
	COD_MODULO varchar(20) CONSTRAINT PK_MODULOS PRIMARY KEY NOT NULL,
	NOMBRE_MODULO varchar(30) NOT NULL,
	DURACION_MODULO tinyint NOT NULL,
	DESCRIPCION varchar(200) NULL DEFAULT 'NO REGISTRA',
	BORRADO_MOD BIT DEFAULT 0 NOT NULL
);
--modificacion de tabla modulos--
ALTER TABLE MODULOS
	ADD COSTO INT NOT NULL
---------------------------

--TABLA PROGRAMAS--
CREATE TABLE PROGRAMAS(
	COD_PROGRAMA varchar(10) CONSTRAINT PK_PROGRAMAS PRIMARY KEY NOT NULL,
	NOMBRE_PROGRAMA varchar(30) NOT NULL,
	DURACCION_PROGRAMA INT  NOT NULL,
	DESCRIPCION varchar(200) DEFAULT 'NO REGISTRA' NULL,
	BORRADO_PRO BIT DEFAULT 0 NOT NULL
);

--TABLA MODULOS_PROGRAMAS--
CREATE TABLE MODULOS_PROGRAMAS(
	ID_PROGRAMA_MODULO varchar(20) CONSTRAINT PK_MODULOS_PROGRAMA PRIMARY KEY NOT NULL,
	COD_PROGRAMA varchar(10) CONSTRAINT FK_MODU_PROGRA_COD_PRO REFERENCES PROGRAMAS(COD_PROGRAMA) NOT NULL,
	COD_MODULO varchar(20) CONSTRAINT FK_MODU_PROGRA_COD_MOD REFERENCES MODULOS(COD_MODULO) NOT NULL,
);

--TABLA PROFESORES--
CREATE TABLE PROFESORES(
	COD_PROFESOR INT CONSTRAINT PK_PROFESORES PRIMARY KEY NOT NULL,
	NOMBRE_P varchar(20) NOT NULL,
	PRIMER_APELLIDO_P varchar(20) NOT NULL,
	SEGUNDO_APELLIDO_P varchar(20) NOT NULL,
	CEDULA_P varchar(10) NOT NULL,
	TELEFONO_P varchar(10) NOT NULL,
	DIRECCION_P varchar(200) NOT NULL,
	ESTADO_P varchar(4) CONSTRAINT CK_ESTADO_P CHECK(ESTADO_P IN('ACT','INAC',upper(ESTADO_P))) NOT NULL,
	CANT_HIJOS tinyint DEFAULT 0 NOT NULL,
	BORRADO_PROF BIT DEFAULT 0 NOT NULL
);


--TABLA CERTIFICADOS_PROFESORES--
CREATE TABLE CERTIFICADOS_PROFESORES(
	COD_PROFESOR INT CONSTRAINT FK_CERT_PR_PROF REFERENCES PROFESORES(COD_PROFESOR) NOT NULL,
	CERTIFICADOS varchar(100) NOT NULL,
	DESCRIPCION varchar(200) NOT NULL,
	BORRADO_CERT BIT DEFAULT 0 NOT NULL
);

--TABLA MODULOS_ABIERTOS--
CREATE TABLE MODULOS_ABIERTOS(
	COD_MODULO_ABIERTO varchar(10) CONSTRAINT PK_MOD_ABIERT PRIMARY KEY NOT NULL,
	ID_PROGRAMA_MODULO varchar(20) CONSTRAINT FK_MOD_ABIER_PROG_MOD FOREIGN KEY REFERENCES MODULOS_PROGRAMAS(ID_PROGRAMA_MODULO) NOT NULL,
	COD_PROFESOR INT CONSTRAINT FK_MOD_ABI_PROF FOREIGN KEY REFERENCES PROFESORES(COD_PROFESOR) NOT NULL,
	GRUPO varchar(20) NOT NULL,
	COSTO bigint NOT NULL,
	PERIODO varchar(20) NOT NULL,
	ANIO date DEFAULT getdate() NOT NULL,
	BORRADO_MOD_ABRT BIT DEFAULT 0 NOT NULL
);

--TABLA DETALLES_MATRICULA--
CREATE TABLE DETALLES_MATRICULA(
	NUM_RECIBO bigint CONSTRAINT FK_DET_MAT_MATR FOREIGN KEY REFERENCES MATRICULA(NUM_RECIBO) NOT NULL,
	COD_MODULO_ABIERTO varchar(10) CONSTRAINT FK_DET_MAT_MOD_ABIERT FOREIGN KEY REFERENCES MODULOS_ABIERTOS(COD_MODULO_ABIERTO) NOT NULL,
	NOTA_FINAL decimal(3,1) NULL,
	ESTADO_DM varchar(4) CONSTRAINT CK_ESTADODM CHECK(ESTADO_DM IN('APL','APR','REPR',upper(ESTADO_DM))) DEFAULT 'APL' NOT NULL,
	DETALLES varchar(200) NULL
);
 ALTER TABLE DETALLES_MATRICULA
   ADD BORRADO_DM BIT DEFAULT 0 NOT NULL

--HORARIOS--
CREATE TABLE HORARIOS(
	COD_MODULO_ABIERTO varchar(10) CONSTRAINT FK_HORAR_MOD_ABIERT FOREIGN KEY REFERENCES MODULOS_ABIERTOS(COD_MODULO_ABIERTO) NOT NULL,
	COD_LABORATORIO varchar(10) NOT NULL,
	DIA varchar(10) DEFAULT getdate() NOT NULL,
	HORA_INICIO time NOT NULL,
	HORA_FIN time NOT NULL,
	BORRADO_HOR BIT DEFAULT 0 NOT NULL
);

--INSERCCION DE DATOS--

--INSERTA DATOS A LA TABLA ESTUDIANTES--
INSERT INTO ESTUDIANTES(CARNET_ESTUDIANTE,NOMBRE_ESTUDIANTE,PRIMER_APELLIDO_E,
						SEGUNDO_APELLIDO_E,CEDULA_E,TELEFONO_E,EMAIL_E,DIRECCION_E,
						PROVINCIA_E,CANTON_E,DISTRITO_E)
	VALUES('01', 'CARLOS','MORA', 'SUAREZ','1-1', '2222-2222','CARLOS@GMAIL.COM','PALO MANGO A LA DERECHA', 'ALAJUELA','PALMARES','PALMA'),
	      ('02', 'JUAN','PORRAS', 'QUESADA','1-2', '3333-3333','JUAN@GMAIL.COM','PALO MANGO A LA IZQUIERDA', 'SAN JOSE','DESAMPARADOS','ABAJO'),
		  ('03', 'PEDRO','LEYVA', 'MORALES','1-3', '4444-4444','PEDRO@GMAIL.COM','100 NORTE SUPER PALMITA', 'ALAJUELA','SAN CARLOS','QUESADA'),
		  ('04', 'MARIA','MORA', 'CARRILLO','1-4', '5555-4444','MARIA@GMAIL.COM',' ANTES DEL PERRO HECHADO', 'CARTAGO','TRES RIOS','ARRIBA'),
		  ('05', 'MARIO','MEJIAS', 'CAMPOS','1-5', '5555-5555','MARIO@GMAIL.COM','DEL SUPER MARGARITA 100 SUR', 'PUNTARENAS','PLAYAS','EL ROBLE'),
		  ('06', 'CARMEN','ROJAS', 'COPPER','1-6', '6666-6666','CARMEN@GMAIL.COM','CAMINO A LA PLAZA ENTRADA DERECHA', 'HEREDIA','LAS FLORES',' ROJAS'),
		  ('07', 'LUIS','CAMPOS', 'LAZO','1-7', '7777-7777','LUIS@GMAIL.COM','BARRIO JARDIN CASA CON FLORES', 'LIMON','PUERTO VIEJO','SARAPIQUI'),
		  ('08', 'CLARA','SALAS', 'SUAREZ','1-8', '8888-8888','CLARA@GMAIL.COM','BARRIO LOS ACOSTADOS ANTES DEL SUPER EL ACOSTADO', 'ALAJUELA','PITAL','TRES ESQUINAS'),
		  ('09', 'PAULO','LOPEZ', 'MADRIGAL','1-9', '9999-9999','PAULO@GMAIL.COM','100 ANTES DEL PALITO DE MANDARINAS', 'GUANACASTE','SANTA CRUZ','SANTA ELENA'),
		  ('10', 'CARLOS','HUERTAS', 'PACHECO','2-1', '8888-9999','CARLOS2@GMAIL.COM','200 NORTE DE LA IGLESIA', 'ALAJUELA','PALMARES','PALMA');

--INSERTA DATOS A LA TABLA MATRICULA--
INSERT INTO MATRICULA( NUM_RECIBO, CARNET_ESTUDIANTE, FECHA, MONTO, DESCUENTO, ESTADO_M)
	VALUES (123, '01', '20230125', 150000.00, 0.10, 'INAC'),
		   (345, '02', '20230126', 100000.00, 0.10, 'INAC'),
		   (567, '03', '20230127', 140000.00, 0.10, 'ACT'),
		   (789, '04', '20230128', 130000.00, 0.10, 'ACT'),
		   (987, '05', '20230129', 125000.00, 0.10, 'ACT'),
		   (765, '06', '20230130', 255000.00, 0.10, 'ACT'),
		   (543, '07', '20230131', 245000.00, 0.10, 'INAC'),
		   (321, '08', '20230201', 132000.00, 0.10, 'ACT'),
		   (012, '09', '20230202', 100000.00, 0.10, 'ACT'),
		   (023, '10', '20230203', 150000.00, 0.10, 'INAC');

--INSERTAR DATOS EN LA TABLA MODULOS--
INSERT INTO MODULOS(COD_MODULO,NOMBRE_MODULO,DURACION_MODULO,COSTO)
	VALUES('PR-AND-I','PROG. PARA ANDROID I',120,250000),
	      ('PR-AND-II','PROG. PARA ANDROID II',110, 240000),
		  ('PR-AND-III','PROG. PARA ANDROID III',100 ,220000),
		  ('PR-AND-MIX','PROGRAMACION PARA ANDROID I',100,195000),
		  ('LOG-COMPUT','LOGICA COMPUTACIONAL',140, 225000),
		  ('INTRO-JAVA','INTRODUCCION A JAVA',150, 335000),
		  ('PRO-ORIENT-OBJ','PROG. ORIENTADA A OBJETOS',160, 345000),
		  ('HTML','PROG. DE HTML',90, 185000),
		  ('CSS','PROG. DE CSS',60, 175000),
		  ('JAVASCRIPT','PROG. DE JAVA SCRIPT',70,180000),
		  ('BOOTSTRAP','PROG. DE BOOTSTRAP',90,185000),
		  ('NOTEJS','PROG. DE NOTE JS',90,185000);

--INSERTA DATOS EN LA TABLA PROGRAMAS--
INSERT INTO PROGRAMAS(COD_PROGRAMA,NOMBRE_PROGRAMA,DURACCION_PROGRAMA)
	VALUES('DISP-MOV', 'PROG. DE DISPOCITIVOS MOVILES', 450 ),
	      ('SIST-ESCR', 'PROG. DE SIST. DE ESCRITORIO', 450),
		  ('PAG-WEB', 'PROG. DE PAGINAS WEB', 450);

--INSERTA DATOS EN LA TABLA MODULOS_PROGRAMAS--
INSERT INTO MODULOS_PROGRAMAS(ID_PROGRAMA_MODULO,COD_PROGRAMA,COD_MODULO)
	VALUES('MOV-I','DISP-MOV','PR-AND-I'),
		  ('MOV-II','DISP-MOV','PR-AND-II'),
		  ('MOV-III','DISP-MOV','PR-AND-III'),
		  ('MOV-M','DISP-MOV','PR-AND-MIX'),
		  ('LOG-ESCR','SIST-ESCR','LOG-COMPUT'),
		  ('JAV-ESCR','SIST-ESCR','INTRO-JAVA'),
		  ('OBJ-ESCR','SIST-ESCR','PRO-ORIENT-OBJ'),
		  ('PAG-HTML','PAG-WEB','HTML'),
		  ('PAG-JAVA','PAG-WEB','JAVASCRIPT'),
		  ('PAG-CSS','PAG-WEB','CSS'),
		  ('PAG-BOOTS','PAG-WEB','BOOTSTRAP'),
		  ('PAG-NOTE','PAG-WEB','NOTEJS');

--INSERTA DATOS EN LA TABLA PROFESORES--
INSERT INTO PROFESORES(COD_PROFESOR,NOMBRE_P,PRIMER_APELLIDO_P,SEGUNDO_APELLIDO_P,CEDULA_P,TELEFONO_P,DIRECCION_P, ESTADO_P,CANT_HIJOS)
	VALUES(1, 'JUAN', 'PEREZ','BOLAÑOS', '2-2', '1234-5678', '100MTS SUR LA LOMA', 'ACT', 1),
		  (2, 'PABLO', 'CAMPOS','GUTI', '2-3', '5678-1234', '100MTS NORTE LA LOMA', 'INAC', 2),
		  (3, 'PEDRO', 'MORA','ROJAS', '2-4', '8765-4321', '100MTS ESTE LA LOMA', 'ACT', 0),
		  (4, 'LUIS', 'CANALES','ROJAS', '2-5', '9874-1235', '100MTS OESTE LA LOMA', 'ACT', 1),
		  (5, 'LEO', 'ARAUZ','FONSECA', '2-6', '1234-5555', '100MTS NORTE DEL SUPER', 'INAC', 3),
		  (6, 'PAULA', 'MOLINA','CAMPOS', '2-7', '1111-5678', '100MTS SUR DEL SUPER', 'ACT', 2),
		  (7, 'CARLOS', 'LINARES','SALAS', '2-8', '1234-2222', '100MTS ESTE DEL SUPER', 'ACT', 0),
		  (8, 'ALONSO', 'OCHOA','BOLAÑOS', '2-9', '3333-5678', '100MTS OESTE DEL SUPER', 'INAC', 0),
		  (9, 'MANUEL', 'LAZO','HUERTAS', '3-1', '1234-4444', '100MTS NORTE EL ARBOL', 'ACT', 4),
		  (10, 'EDUARDO', 'ARAUZ','CAMPOS', '3-2', '5555-5678', '100MTS SUR EL ARBOL', 'INAC', 0);

--INSERTA DATOS EN LA TABLA CERTIFICADOS_PROFESORES--
INSERT INTO CERTIFICADOS_PROFESORES(COD_PROFESOR,CERTIFICADOS,DESCRIPCION)
	VALUES(1,'MANEJO DE DISPOSITOVOS ANDROID', 'PUEDE IMPARTIR DISP-MOV'),
		  (2,'MANEJO DE DISPOSITOVOS ANDROID', 'PUEDE DSP.MOV'),
		  (3,'PROGRAMADOR DE APLICAIONES INFORMATICAS', 'PUEDE IMPARTIR SIST.ESCR'),
		  (4,'PROGRAMADOR DE APLICAIONES INFORMATICAS', 'PUEDE IMPARTIR SIST.ESCR'),
		  (5,'INGENIERO DE SOFTWARE', 'PUEDE IMPARTIR TODOS LOS PROGRAMAS'),
		  (6,'PROGRAMADOR DE PAGINAS WEB', 'PUEDE IMPARTIR PAG.WEB'),
		  (7,'PROGRAMADOR DE PAGINAS WEB', 'PUEDE IMPARTIR PAG.WEB'),
		  (8,'PROGRAMADOR NIVEL 2', 'PUEDE IMPARTIR SIST.ESCR'),
		  (9,'INGENIERO DEL SOFTWARE', 'PUEDE IMPARTIR TODOS LOS PROGRAMAS'),
		  (4,'PROGRAMADOR EN JAVA', 'PUEDE IMPARTIR INTRO.JAVA Y JAVASCRIPT');

--INSERTA DATOS EN LA TABLA MODULOS_ABIERTOS--
INSERT INTO MODULOS_ABIERTOS(COD_MODULO_ABIERTO,ID_PROGRAMA_MODULO, COD_PROFESOR,GRUPO,COSTO,PERIODO,ANIO)
	VALUES('INA01','MOV-I','01','GR-01', 250000, 'PRIMER PERIODO','20230125'),
	      ('INA02','MOV-II','07','GR-02', 240000, 'PRIMER PERIODO','20230126'),
		  ('INA03','MOV-III','01','GR-03', 220000, 'PRIMER PERIODO','20230127'),
		  ('INA04','MOV-M','01','GR-04', 195000, 'PRIMER PERIODO','20230128'),
		  ('INA05','LOG-ESCR','02','GR-05', 225000, 'SEGUNDO PERIODO','20230129'),
		  ('INA06','OBJ-ESCR','06','GR-06', 345000, 'SEGUNDO PERIODO','20230130'),
		  ('INA07','PAG-HTML','05','GR-07', 185000, 'TERCER PERIODO','20230131'),
		  ('INA08','PAG-CSS','05','GR-08', 175000, 'TERCER PERIODO','20230201'),
		  ('INA09','PAG-BOOTS','10','GR-09', 185000, 'TERCER PERIODO','20230202'),
		  ('INA10','PAG-JAVA','10','GR-10', 180000, 'TERCER PERIODO','20230203');

--INSERTA DATOS EN LA TABLA DETALLES_MATRICULA--
INSERT INTO DETALLES_MATRICULA(NUM_RECIBO,COD_MODULO_ABIERTO,NOTA_FINAL,ESTADO_DM)
	VALUES('12','INA01',70.0, 'APR'),
		  ('23','INA02',90.0, 'APR'),
		  ('123','INA03',69.0, 'APL'),
		  ('321','INA04',59.0, 'REPR'),
		  ('345','INA05',92.0, 'APR'),
		  ('543','INA06',89.0, 'APR'),
		  ('567','INA07',77.0, 'APR'),
		  ('765','INA08',65.0, 'APL'),
		  ('789','INA09',58.0, 'REPR'),
		  ('987','INA10',66.0, 'APL');

---INSERTA DATOS EN HORARIOS---
INSERT INTO HORARIOS(COD_MODULO_ABIERTO,COD_LABORATORIO, DIA, HORA_INICIO,HORA_FIN)
	VALUES('INA01', 'LAB-01', 'LUNES', '07:00','12:00'),
		  ('INA02', 'LAB-01', 'JUEVES', '13:00','18:00'),
		  ('INA03', 'LAB-02', 'LUNES', '07:00','12:00'),
		  ('INA04', 'LAB-02', 'VIERNES', '13:00','18:00'),
		  ('INA05', 'LAB-03', 'LUNES', '07:00','12:00'),
		  ('INA06', 'LAB-03', 'MARTES', '13:00','18:00'),
		  ('INA07', 'LAB-04', 'LUNES', '07:00','12:00'),
		  ('INA08', 'LAB-04', 'MIERCOLES', '13:00','18:00'),
		  ('INA09', 'LAB-05', 'LUNES', '07:00','12:00'),
		  ('INA10', 'LAB-05', 'LUNES', '13:00','18:00');

-------------------------------------------------------------------------------------------------------------------------
--(CRUDS) para cada tablA

--CREACION DE  CRUDS CON SP--
-------------------------------------------ESTUDIANTES--------------------------------------------------------------------
--SP PARA INSERTAR TABLA ESTUDIANTES--
GO
CREATE OR ALTER PROCEDURE CRUD_ESTUDI_INSERT (@CARNET VARCHAR(10) OUT, @NOMBRE_ESTU VARCHAR(200),@PRIMER_AP VARCHAR(20),
									   @SEGUNDO_AP VARCHAR(20),@CEDULA VARCHAR(10), @TELEFONO VARCHAR(10),@EMAIL VARCHAR(30),
									   @DIRECCION VARCHAR(100),@PROVINCIA VARCHAR(20), @CANTON VARCHAR(20),
									   @DISTRITO VARCHAR(20), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			INSERT INTO ESTUDIANTES (CARNET_ESTUDIANTE, NOMBRE_ESTUDIANTE ,PRIMER_APELLIDO_E,SEGUNDO_APELLIDO_E,
									 CEDULA_E, TELEFONO_E,EMAIL_E, DIRECCION_E,PROVINCIA_E,CANTON_E,DISTRITO_E)
			VALUES(@CARNET, @NOMBRE_ESTU,@PRIMER_AP,@SEGUNDO_AP,@CEDULA,@TELEFONO,@EMAIL,@DIRECCION,
				   @PROVINCIA,@CANTON,@DISTRITO)
			SET @MSJ = 'ESTUDIANTE AGREGADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

GO

DECLARE	@return_value int,
		@CARNET varchar(10),
		@MSJ varchar(200)

SELECT	@CARNET = N'''10'''
SELECT	@MSJ = N'''SI'''

EXEC	@return_value = [dbo].[CRUD_ESTUDI_INSERT]
		@CARNET = @CARNET OUTPUT,
		@NOMBRE_ESTU = N'''GAEL''',
		@PRIMER_AP = N'''GUTIERREZ''',
		@SEGUNDO_AP = N'''MEJIAS''',
		@CEDULA = N'''2154''',
		@TELEFONO = N'''85651445''',
		@EMAIL = N'GAEL@GMAIL.COM',
		@DIRECCION = N'''PULPERIA''',
		@PROVINCIA = N'''ALAJUELA''',
		@CANTON = N'''SAN CARLOS''',
		@DISTRITO = N'''QUESADA''',
		@MSJ = @MSJ OUTPUT

SELECT	@CARNET as N'@CARNET',
		@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO
  
---------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR TABLA ESTUDIANTES--
GO
CREATE OR ALTER PROCEDURE CRUD_ESTUDI_ACTU (@CARNET VARCHAR(10) OUT, @NOMBRE_ESTU VARCHAR(200),@PRIMER_AP VARCHAR(20),
									   @SEGUNDO_AP VARCHAR(20),@CEDULA VARCHAR(10), @TELEFONO VARCHAR(10),@EMAIL VARCHAR(30),
									   @DIRECCION VARCHAR(100),@PROVINCIA VARCHAR(20), @CANTON VARCHAR(20),
									   @DISTRITO VARCHAR(20), @MSJ VARCHAR(200) OUT )
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE ESTUDIANTES
			SET CARNET_ESTUDIANTE = @CARNET, NOMBRE_ESTUDIANTE = @NOMBRE_ESTU, PRIMER_APELLIDO_E =@PRIMER_AP,
				SEGUNDO_APELLIDO_E = @SEGUNDO_AP, CEDULA_E =@CEDULA, TELEFONO_E =@TELEFONO, EMAIL_E =@EMAIL,
				DIRECCION_E =@DIRECCION,PROVINCIA_E =@PROVINCIA, CANTON_E =@CANTON, DISTRITO_E =@DISTRITO
				WHERE CARNET_ESTUDIANTE = @CARNET
			SET @MSJ = 'ESTUDIANTE ACTUALIZADO SATISFACTORIAMENTE'

			SELECT CARNET_ESTUDIANTE, NOMBRE_ESTUDIANTE +' '+PRIMER_APELLIDO_E +' '+ SEGUNDO_APELLIDO_E AS NOMBRE_COMPLETO,
					CEDULA_E, TELEFONO_E, EMAIL_E,DIRECCION_E,PROVINCIA_E,CANTON_E,DISTRITO_E
			FROM ESTUDIANTES
			WHERE CARNET_ESTUDIANTE = @CARNET
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
    END CATCH

GO

DECLARE	@return_value int,
		@CARNET varchar(10),
		@MSJ varchar(200)

SELECT	@CARNET = N'11'
SELECT	@MSJ = N'''SI'''

EXEC	@return_value = [dbo].[CRUD_ESTUDI_ACTU]
		@CARNET = @CARNET OUTPUT,
		@NOMBRE_ESTU = N'''ANTONIO''',
		@PRIMER_AP = N'''GUTI''',
		@SEGUNDO_AP = N'''MEJIAS''',
		@CEDULA = N'''2703''',
		@TELEFONO = N'''8525-8565''',
		@EMAIL = N'''DERICK@GMAIL.COM''',
		@DIRECCION = N'''PULPE''',
		@PROVINCIA = N'''ALAJUELA''',
		@CANTON = N'''SAN CARLOS''',
		@DISTRITO = N'''QUESADA''',
		@MSJ = @MSJ OUTPUT

SELECT	@CARNET as N'@CARNET',
		@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR EN LA TABLA ESTUDIANTES--
GO
CREATE OR ALTER PROCEDURE CRUD_ESTUDI_DELET (@CARNET VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE ESTUDIANTES
			SET BORRADO_E = 1
			WHERE CARNET_ESTUDIANTE = @CARNET
			SET @MSJ = 'ESTUDIANTE BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH
GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_ESTUDI_DELET]
		@CARNET = N'05',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------MATRICULA------------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA MATRICULA---
GO
CREATE OR ALTER PROCEDURE CRUD_MATRI_INSERT (@NUM_RECIBO BIGINT OUT,@CARNET VARCHAR(10),@FECHA DATE, @MONTO BIGINT, 
										     @DESCUENTO BIGINT, @ESTADO VARCHAR(4),@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO MATRICULA(NUM_RECIBO, CARNET_ESTUDIANTE,FECHA,MONTO,	DESCUENTO,ESTADO_M)
			VALUES(@NUM_RECIBO,@CARNET,@FECHA,@MONTO,@DESCUENTO,@ESTADO)
			SET @MSJ = 'MATRICULA AGREGADA SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY

	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@NUM_RECIBO bigint,
		@MSJ varchar(100)

SELECT	@NUM_RECIBO = 852

EXEC	@return_value = [dbo].[CRUD_MATRI_INSERT]
		@NUM_RECIBO = @NUM_RECIBO OUTPUT,
		@CARNET = N'''11''',
		@FECHA = '20230217',
		@MONTO = 165000,
		@DESCUENTO = 0.10,
		@ESTADO = 'ACT',
		@MSJ = @MSJ OUTPUT

SELECT	@NUM_RECIBO as N'@NUM_RECIBO',
		@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

---------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA MATRICULAS--
GO
CREATE OR ALTER PROCEDURE CRUD_MATRI_ACT (@NUM_RECIBO BIGINT OUT,@CARNET VARCHAR(10),@FECHA DATE, @MONTO BIGINT, 
										     @DESCUENTO BIGINT, @ESTADO VARCHAR(4),@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE MATRICULA
			SET NUM_RECIBO = @NUM_RECIBO, CARNET_ESTUDIANTE=@CARNET, FECHA = @FECHA, MONTO =@MONTO,
				DESCUENTO =@DESCUENTO, ESTADO_M =@ESTADO
			SELECT NUM_RECIBO, CARNET_ESTUDIANTE,FECHA, MONTO, DESCUENTO, ESTADO_M
			FROM MATRICULA
			WHERE CARNET_ESTUDIANTE = @CARNET
			SET @MSJ = 'MATRICULA ACTUALIZADA SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH
   GO

DECLARE	@return_value int,
		@NUM_RECIBO bigint,
		@MSJ varchar(100)

SELECT	@NUM_RECIBO = 456

EXEC	@return_value = [dbo].[CRUD_MATRI_ACT]
		@NUM_RECIBO = @NUM_RECIBO OUTPUT,
		@CARNET = N'''03''',
		@FECHA = '20230218',
		@MONTO = 165000,
		@DESCUENTO = 0.10,
		@ESTADO = N'''ACT''',
		@MSJ = @MSJ OUTPUT

SELECT	@NUM_RECIBO as N'@NUM_RECIBO',
		@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

---------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA MATRICULAS--
GO
CREATE OR ALTER PROCEDURE CRUD_MATRI_DELET (@CARNET VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE MATRICULA
			SET BORRADO_M = 1
			WHERE CARNET_ESTUDIANTE = @CARNET
			SET @MSJ = 'MATRICULA BORRADA SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_MATRI_DELET]
		@CARNET = N'''08''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------MODULOS------------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA MODULOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_INSERT (@COD_MODULO VARCHAR(20),@NOMBRE_M VARCHAR(30), @DURACION TINYINT, @DESCRIPCION VARCHAR(200),
											@COSTO INT ,@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO MODULOS(COD_MODULO, NOMBRE_MODULO, DURACION_MODULO, DESCRIPCION, COSTO)
			VALUES(@COD_MODULO,@NOMBRE_M,@DURACION,@DESCRIPCION,@COSTO)
			SET @MSJ = 'MODULO AGREGADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_MOD_INSERT]
		@COD_MODULO = N'''HTMEL''',
		@NOMBRE_M = N'''HTML2''',
		@DURACION = 85,
		@DESCRIPCION = NULL,
		@COSTO = 145000,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO
---------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA MODULOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_ACT (@COD_MODULO VARCHAR(20),@NOMBRE_M VARCHAR(30), @DURACION TINYINT, @DESCRIPCION VARCHAR(200),
										@COSTO INT ,@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE MODULOS
			SET COD_MODULO =@COD_MODULO, NOMBRE_MODULO =@NOMBRE_M, DURACION_MODULO =@DURACION, DESCRIPCION =@DESCRIPCION,COSTO =@COSTO
			SELECT COD_MODULO, NOMBRE_MODULO, DURACION_MODULO, DESCRIPCION, COSTO
			FROM MODULOS
			WHERE COD_MODULO = @COD_MODULO
			SET @MSJ = 'MODULO ACTUALIZADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_MOD_ACT]
		@COD_MODULO = N'''CSS2''',
		@NOMBRE_M = N'''CSS2''',
		@DURACION = 50,
		@DESCRIPCION = NULL,
		@COSTO = 120000,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

---------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA MODULOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_DELET (@COD_MOD VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE MODULOS
			SET BORRADO_MOD = 1
			WHERE COD_MODULO =@COD_MOD
			SET @MSJ = 'MODULO BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_MOD_DELET]
		@COD_MOD = N'''CSS2''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------PROGRAMAS------------------------------------------------------------

--SP PARA INSERTAR EN LA TABLA PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_PROG_INSERT (@COD_PROG VARCHAR(10),@NOMBRE_PROG VARCHAR(30), @DURACION VARCHAR(20), @DESCRIPCION VARCHAR(200),@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO PROGRAMAS(COD_PROGRAMA,NOMBRE_PROGRAMA,DURACCION_PROGRAMA,DESCRIPCION)
			VALUES(@COD_PROG,@NOMBRE_PROG,@DURACION,@DESCRIPCION)
			SET @MSJ = 'PROGRAMA AGREGADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_PROF_INSERT]
		@COD_PROF = N'11',
		@NOMBRE_P = N'''JUANITO''',
		@PRIMER_A_P = N'''MORA''',
		@SEGUNDO_A_P = N'''JUAREZ''',
		@CEDULA = N'''11111''',
		@TELEFONO = N'8555-5555',
		@DIRECCION_P = NULL,
		@ESTADO_P = N'''ACT''',
		@CANT_HIJOS = 2,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_PRG_ACT (@COD_PROG VARCHAR(10),@NOMBRE_PRG VARCHAR(30), @DURACION VARCHAR(20), @DESCRIPCION VARCHAR(200),
										@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE PROGRAMAS
			SET COD_PROGRAMA = @COD_PROG, NOMBRE_PROGRAMA = @NOMBRE_PRG, DURACCION_PROGRAMA =@DURACION, DESCRIPCION =@DESCRIPCION
			SELECT COD_PROGRAMA, NOMBRE_PROGRAMA, DURACCION_PROGRAMA,DESCRIPCION
			FROM PROGRAMAS
			WHERE COD_PROGRAMA =@COD_PROG
			SET @MSJ = 'PROGRAMA ACTUALIZADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_PRG_ACT]
		@COD_PROG = N'''DISP-MOV''',
		@NOMBRE_PRG = N'''PR.DISP.MOVIL''',
		@DURACION = N'95',
		@DESCRIPCION = NULL,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_PRG_DELET (@COD_PRG VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE PROGRAMAS
			SET BORRADO_PRO = 1
			WHERE COD_PROGRAMA =@COD_PRG
			SET @MSJ = 'PROGRAMA BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_PRG_DELET]
		@COD_PRG = N'''DISP-MOV',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO


-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------MODULOS_PROGRAMAS------------------------------------------------------------

--SP PARA INSERTAR EN LA TABLA MODULOS_PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_PROG_INSERT (@ID_PROG_MOD VARCHAR(20),@COD_PROG VARCHAR(10), @COD_MOD VARCHAR(20),@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO MODULOS_PROGRAMAS(ID_PROGRAMA_MODULO, COD_PROGRAMA,COD_MODULO)
			VALUES(@ID_PROG_MOD,@COD_PROG,@COD_MOD)
			SET @MSJ = 'ID MODULO PROGRAMA SE AGREGO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH
   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_MOD_PROG_INSERT]
		@ID_PROG_MOD = N'''JAV-ESCR2''',
		@COD_PROG = N'''DISP-MOV''',
		@COD_MOD = N'''BOOTSTRAP''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA MODULOS_PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_PRG_ACT (@ID_PROG_MOD VARCHAR(20),@COD_PROG VARCHAR(10), @COD_MOD VARCHAR(20),@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE MODULOS_PROGRAMAS
			SET ID_PROGRAMA_MODULO = @ID_PROG_MOD, COD_PROGRAMA = @COD_PROG, COD_MODULO =@COD_MOD
			SELECT ID_PROGRAMA_MODULO,COD_PROGRAMA,COD_MODULO
			FROM MODULOS_PROGRAMAS
			WHERE ID_PROGRAMA_MODULO =@ID_PROG_MOD
			SET @MSJ = 'ID MODULO PROGRAMA SE ACTUALIZO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_MOD_PRG_ACT]
		@ID_PROG_MOD = N'''JAV-ESCR''',
		@COD_PROG = N'''DISP-MOV''',
		@COD_MOD = N'''BOOTSTRAP''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA MODULOS_PROGRAMAS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_PROG_DELET (@ID_MOD_PROG VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			DELETE MODULOS_PROGRAMAS
			WHERE ID_PROGRAMA_MODULO = @ID_MOD_PROG
			SET @MSJ = 'ID MODULO PROGRAMA BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_MOD_PROG_DELET]
		@ID_MOD_PROG = N'JAV-ESCR',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------PROFESORES-------------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_PROF_INSERT (@COD_PROF VARCHAR(10),@NOMBRE_P VARCHAR(20), @PRIMER_A_P VARCHAR(20),
										    @SEGUNDO_A_P VARCHAR(20), @CEDULA VARCHAR(10), @TELEFONO VARCHAR(10),
											@DIRECCION_P VARCHAR(200),@ESTADO_P VARCHAR(4),@CANT_HIJOS TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO PROFESORES(COD_PROFESOR,NOMBRE_P,PRIMER_APELLIDO_P,SEGUNDO_APELLIDO_P,CEDULA_P,TELEFONO_P,DIRECCION_P,ESTADO_P,CANT_HIJOS)
			VALUES(@COD_PROF,@NOMBRE_P,@PRIMER_A_P,@SEGUNDO_A_P,@CEDULA,@TELEFONO, @DIRECCION_P,@ESTADO_P,@CANT_HIJOS)
			SET @MSJ = 'EL PROFESOR SE AGREGO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_PROF_INSERT]
		@COD_PROF = N'''12''',
		@NOMBRE_P = N'''LEO''',
		@PRIMER_A_P = N'''MORA''',
		@SEGUNDO_A_P = N'''BEJARANO''',
		@CEDULA = N'''7854''',
		@TELEFONO = N'''5485-8565''',
		@DIRECCION_P = N'''PULPERIA''',
		@ESTADO_P = N'''ACT''',
		@CANT_HIJOS = 5,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_PROF_ACT (@COD_PROF VARCHAR(10),@NOMBRE_P VARCHAR(20), @PRIMER_A_P VARCHAR(20),
										    @SEGUNDO_A_P VARCHAR(20), @CEDULA VARCHAR(10), @TELEFONO VARCHAR(10),
											@DIRECCION_P VARCHAR(200),@ESTADO_P VARCHAR(4),@CANT_HIJOS TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE PROFESORES
			SET COD_PROFESOR = @COD_PROF, NOMBRE_P =@NOMBRE_P, PRIMER_APELLIDO_P = @PRIMER_A_P, SEGUNDO_APELLIDO_P =@SEGUNDO_A_P,
				CEDULA_P = @CEDULA, TELEFONO_P = @TELEFONO,DIRECCION_P =@DIRECCION_P, ESTADO_P = @ESTADO_P, CANT_HIJOS =@CANT_HIJOS
			SELECT COD_PROFESOR,NOMBRE_P +' '+ PRIMER_APELLIDO_P +' '+SEGUNDO_APELLIDO_P AS NOMBRE_PROFESOR, CEDULA_P,
				   TELEFONO_P, DIRECCION_P,ESTADO_P,CANT_HIJOS
			FROM PROFESORES
			WHERE COD_PROFESOR =@COD_PROF
			SET @MSJ = 'EL PROFESOR SE ACTUALIZO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_PROF_ACT]
		@COD_PROF = N'12',
		@NOMBRE_P = N'''LEO''',
		@PRIMER_A_P = N'''MORA''',
		@SEGUNDO_A_P = N'''CHAVEZ''',
		@CEDULA = N'''4522''',
		@TELEFONO = N'''8545-9658''',
		@DIRECCION_P = N'''ARBOL''',
		@ESTADO_P = N'''INAC''',
		@CANT_HIJOS = 5,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO



----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_PROF_DELET (@COD_PROF VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE PROFESORES
			SET BORRADO_PROF = 1
			WHERE COD_PROFESOR = @COD_PROF
			SET @MSJ = 'PROFESOR BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_PROF_DELET]
		@COD_PROF = N'1',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------CERTIFICADOS_PROFESORES------------------------------------------------

--SP PARA INSERTAR EN LA TABLA CERTIFICADOS_PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_CERT_PROF_INSERT (@COD_PROF VARCHAR(10),@CERTIFICADO VARCHAR(100),@DESCRIPCION VARCHAR(200), @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO CERTIFICADOS_PROFESORES(COD_PROFESOR,CERTIFICADOS,DESCRIPCION)
			VALUES(@COD_PROF,@CERTIFICADO,@DESCRIPCION)
			SET @MSJ = 'EL CERTIFICADO PARA EL PROFESOR CON EL CODIGO: '+ @COD_PROF+ ' SE AGREGO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_CERT_PROF_INSERT]
		@COD_PROF = N'1',
		@CERTIFICADO = N'''INGENIERO''',
		@DESCRIPCION = N'''PAG-WEB''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA CERTIFICADOS_PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_CERT_PROF_ACT (@COD_PROF VARCHAR(10),@CERTIFICADO VARCHAR(100),@DESCRIPCION VARCHAR(200), @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE CERTIFICADOS_PROFESORES
			SET COD_PROFESOR =@COD_PROF, CERTIFICADOS =@CERTIFICADO, DESCRIPCION =@DESCRIPCION
			SELECT COD_PROFESOR,CERTIFICADOS, DESCRIPCION
			FROM CERTIFICADOS_PROFESORES
			WHERE COD_PROFESOR =@COD_PROF
			SET @MSJ = 'EL CERTIFICADO DE PROFESOR SE ACTUALIZO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_CERT_PROF_ACT]
		@COD_PROF = N'1',
		@CERTIFICADO = N'''''PROGRAMADOR''',
		@DESCRIPCION = N'''TODOS LOS PROGRAMAS''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA CERTIFICADOS_PROFESORES--
GO
CREATE OR ALTER PROCEDURE CRUD_CERT_PROF_DELET (@COD_PROF VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE CERTIFICADOS_PROFESORES
			SET BORRADO_CERT = 1
			WHERE COD_PROFESOR = @COD_PROF
			SET @MSJ = ' CERTIFIADO DEL PROFESOR BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_CERT_PROF_DELET]
		@COD_PROF = N'1',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------MODULOS_ABIERTOS------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA MODULOS_ ABIERTOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_ABIERT_INSERT (@COD_MOD_ABRT VARCHAR(10),@ID_PROG_MOD VARCHAR(20), @COD_PROF VARCHAR(10),
												  @GRUPO VARCHAR(20),@COSTO BIGINT, @PERIODO VARCHAR(20),@ANIO DATE, @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO MOULOS_ABIERTOS(COD_MODULO_ABIERTO, ID_PROGRAMA_MODULO, COD_PROFESOR, GRUPO, COSTO, PERIODO, ANIO)
			VALUES (@COD_MOD_ABRT,@ID_PROG_MOD,@COD_PROF, @GRUPO, @COSTO,@PERIODO,@ANIO)
			SET @MSJ = 'EL MODULO AH SIDO ABIERTO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH



----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA MODULOS_ABIERTOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_ABRT_ACT (@COD_MOD_ABRT VARCHAR(10),@ID_PROG_MOD VARCHAR(20), @COD_PROF VARCHAR(10),
												  @GRUPO VARCHAR(20),@COSTO BIGINT, @PERIODO VARCHAR(20),@ANIO DATE, @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE MODULOS_ABIERTOS
			SET COD_MODULO_ABIERTO =@COD_MOD_ABRT, ID_PROGRAMA_MODULO =@ID_PROG_MOD, COD_PROFESOR = @COD_PROF, 
			    GRUPO =@GRUPO,COSTO=@COSTO, PERIODO =@PERIODO, ANIO =@ANIO
			SELECT COD_MODULO_ABIERTO,ID_PROGRAMA_MODULO, COD_PROFESOR,GRUPO, COSTO, PERIODO, ANIO
			FROM MODULOS_ABIERTOS
			WHERE COD_MODULO_ABIERTO =@COD_MOD_ABRT
			SET @MSJ = 'EL MODULO ABIERTO SE ACTUALIZO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA MODULOS_ABIERTOS--
GO
CREATE OR ALTER PROCEDURE CRUD_MOD_ABRT_DELET (@COD_MOD_ABRT VARCHAR(10), @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE MODULOS_ABIERTOS
			SET BORRADO_MOD_ABRT = 1
			WHERE COD_MODULO_ABIERTO = @COD_MOD_ABRT
			SET @MSJ = ' EL MODULO ABIERTO A SIDO BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_MOD_ABRT_DELET]
		@COD_MOD_ABRT = N'''DISP-MOV''',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------DETALLES_MATRICULA------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA DETALLES MATRICULA--
GO
CREATE OR ALTER PROCEDURE CRUD_DET_MATR_INSERT (@NUM_RECIBO BIGINT,@COD_MOD_ABRT VARCHAR(10),@NOTA_FINAL DECIMAL(3,1), 
												@ESTADO_DM VARCHAR(4), @DETALLE VARCHAR(200), @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO DETALLES_MATRICULA(NUM_RECIBO, COD_MODULO_ABIERTO, NOTA_FINAL, ESTADO_DM, DETALLES)
			VALUES (@NUM_RECIBO,@COD_MOD_ABRT,@NOTA_FINAL,@ESTADO_DM,@DETALLE)
			SET @MSJ = 'EL REGISTRO O DETALLE DE LA MATRICULA SE CREO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_DET_MATR_INSERT]
		@NUM_RECIBO = 4586,
		@COD_MOD_ABRT = N'''DSIP-MOV''',
		@NOTA_FINAL = 85,
		@ESTADO_DM = N'''APR''',
		@DETALLE = NULL,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA DETALLES_MATRICULA--
GO
CREATE OR ALTER PROCEDURE CRUD_DET_MATR_ACT (@NUM_RECIBO BIGINT,@COD_MOD_ABRT VARCHAR(10),@NOTA_FINAL DECIMAL(3,1), 
												@ESTADO_DM VARCHAR(4), @DETALLE VARCHAR(200), @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE DETALLES_MATRICULA
			SET NUM_RECIBO =@NUM_RECIBO, COD_MODULO_ABIERTO =@COD_MOD_ABRT, NOTA_FINAL =@NOTA_FINAL, ESTADO_DM =@ESTADO_DM, DETALLES =@DETALLE
			SELECT NUM_RECIBO, COD_MODULO_ABIERTO, NOTA_FINAL, ESTADO_DM, DETALLES
			FROM DETALLES_MATRICULA
			WHERE NUM_RECIBO =@NUM_RECIBO
			SET @MSJ = 'EL REGISTRO O DETALLE DE LA MATRICULA SE ACTUALIZO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_DET_MATR_ACT]
		@NUM_RECIBO = 123,
		@COD_MOD_ABRT = N'''PAGI-WEB''',
		@NOTA_FINAL = 100,
		@ESTADO_DM = N'''APR''',
		@DETALLE = NULL,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA DETALLES_MATRICULA--
GO
CREATE OR ALTER PROCEDURE CRUD_DET_MATR_DELET (@NUM_RECIBO BIGINT, @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE DETALLES_MATRICULA
			SET BORRADO_DM = 1
			WHERE NUM_RECIBO =@NUM_RECIBO
			SET @MSJ = ' EL REGISTRO O DETALLE DE LA MATRICULA SIDO BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_DET_MATR_DELET]
		@NUM_RECIBO = 123,
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

-------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------HORARIOS---------------------------------------------------------------
--SP PARA INSERTAR EN LA TABLA HORARIOS--
GO
CREATE OR ALTER PROCEDURE CRUD_HOR_INSERT (@COD_MOD_ABRT VARCHAR(10),@COD_LAB VARCHAR(10), @DIA VARCHAR(10),
											@HORA_INICIO TIME, @HORA_FIN TIME, @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		INSERT INTO  HORARIOS(COD_MODULO_ABIERTO, COD_LABORATORIO, DIA, HORA_INICIO, HORA_FIN)
			VALUES (@COD_MOD_ABRT, @COD_LAB, @DIA, @HORA_INICIO, @HORA_INICIO)
			SET @MSJ = 'EL HORARIO SE CREO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_HOR_INSERT]
		@COD_MOD_ABRT = N'''DISP-MOV''',
		@COD_LAB = N'''LAB01''',
		@DIA = N'''LUNES''',
		@HORA_INICIO = '7:00:00',
		@HORA_FIN = '12:00:00',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO
------------------------------------------------------------------------------------------------
--SP PARA ACTUALIZAR Y MOSTRAR EN LA TABLA HORARIOS--
GO
CREATE OR ALTER PROCEDURE CRUD_HOR_ACT (@COD_MOD_ABRT VARCHAR(10),@COD_LAB VARCHAR(10), @DIA VARCHAR(10),
										@HORA_INICIO TIME, @HORA_FIN TIME, @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
		UPDATE HORARIOS
			SET COD_MODULO_ABIERTO =@COD_MOD_ABRT, COD_LABORATORIO =@COD_LAB, DIA =@DIA, HORA_INICIO =@HORA_INICIO, HORA_FIN =@HORA_FIN
			SELECT COD_MODULO_ABIERTO, COD_LABORATORIO, DIA, HORA_INICIO, HORA_FIN
			FROM HORARIOS
			WHERE COD_MODULO_ABIERTO =@COD_MOD_ABRT
			SET @MSJ = 'EL HORARIO A SIDO ACTUALIZADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(100)

EXEC	@return_value = [dbo].[CRUD_HOR_ACT]
		@COD_MOD_ABRT = N'''DISP-MOV''',
		@COD_LAB = N'''LAB01''',
		@DIA = N'''MARTES''',
		@HORA_INICIO = '7:00:00',
		@HORA_FIN = '11:00:00',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO


----------------------------------------------------------------------------------------------
--SP PARA ELIMINAR DE LA TABLA DETALLES_MATRICULA--
GO
CREATE OR ALTER PROCEDURE CRUD_HOR_DELET (@COD_MOD_ABRT BIGINT, @MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRAN
			UPDATE HORARIOS
			SET BORRADO_HOR = 1
			WHERE COD_MODULO_ABIERTO = @COD_MOD_ABRT
			SET @MSJ = ' EL HORARIO A SIDO BORRADO SATISFACTORIAMENTE'
		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH

   GO

DECLARE	@return_value int,
		@MSJ varchar(200)

EXEC	@return_value = [dbo].[CRUD_HOR_DELET]
		@COD_MOD_ABRT = 'DISP-MOV',
		@MSJ = @MSJ OUTPUT

SELECT	@MSJ as N'@MSJ'

SELECT	'Return Value' = @return_value

GO

/*--------------------------------------------------------------------------------------------------------------------
Crea al menos 8 Funciones
Las Funciones creadas son útiles y aplicables*/
-----------------------------------------------------FUNCIONES--------------------------------------------------------

--01 CREE UNA FUNCION QUE IDENTIFIQUE SI EXISTEN ESTUDIANTES EN 'N' MODULO*/


SELECT * FROM MODULOS
GO
CREATE FUNCTION EXISTEN_EN_MODULOS(@MODULO VARCHAR(6))
RETURNS INT AS
	BEGIN
		DECLARE @SI_HAY_ESTUDIANTES INT
		SET @SI_HAY_ESTUDIANTES = (SELECT COUNT( E.CARNET_ESTUDIANTE) AS ESTUDIANTES_POR_CURSO
					FROM ESTUDIANTES E INNER JOIN MATRICULA M
						 ON E.CARNET_ESTUDIANTE = M.CARNET_ESTUDIANTE
							INNER JOIN DETALLES_MATRICULA DM
							ON M. NUM_RECIBO = DM.NUM_RECIBO
								INNER JOIN MODULOS_ABIERTOS MA
								ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
									INNER JOIN MODULOS_PROGRAMAS MP
									ON MA.ID_PROGRAMA_MODULO = MP.ID_PROGRAMA_MODULO
										INNER JOIN MODULOS MD
										ON MP.COD_MODULO = MD.COD_MODULO
					WHERE MA.COD_MODULO_ABIERTO = @MODULO)
					
		IF(@SI_HAY_ESTUDIANTES >0)
								BEGIN
				SET @SI_HAY_ESTUDIANTES = 1
			END
		ELSE
			BEGIN
				SET @SI_HAY_ESTUDIANTES = 0
			END
		RETURN @SI_HAY_ESTUDIANTES
	END

GO
DECLARE @SI_HAY_ESTUDIANTES INT, @MODULO VARCHAR (6)
SET @MODULO = 'INA10'
SET @SI_HAY_ESTUDIANTES = DBO.EXISTEN_EN_MODULOS(@MODULO)

IF @SI_HAY_ESTUDIANTES = 1
	PRINT 'SI HAY ESTUDIANTES MATRICULADOS EN EL MODULO ' + @MODULO 
else
	PRINT 'NO HAY ESTUDIANTES MATRICULADOS EN EL MODULO '+ @MODULO

------------------------------------------------------------------------------
--02 FUNCION PARA CALCULAR EL DESCUENTO DEL COSTO DE CADA MATRICULA, PODREMOS ACTUALIZAR EL CAMPO DEL DESCUENTO CON ESTA FUNCION
GO
CREATE OR ALTER FUNCTION CALCULA_DESCUENTO(@NUM_RECIBO BIGINT, @DESCUENTO DECIMAL)
RETURNS DECIMAL(10,2)
AS
	BEGIN
		DECLARE @MONTO_MATRICULA DECIMAL(10,2)
		DECLARE @MONTO_DESCUENTO DECIMAL(10,2)

		SELECT @MONTO_MATRICULA = SUM(MONTO)
		FROM MATRICULA
		WHERE NUM_RECIBO = @NUM_RECIBO 
		
		SET @MONTO_DESCUENTO = @MONTO_MATRICULA  * @DESCUENTO 

		RETURN @MONTO_DESCUENTO
	END

GO
DECLARE @DESCUENTO DECIMAL, @NUM_RECIBO BIGINT, @MONTO_DESC DECIMAL (10,2)
SET @NUM_RECIBO = 12
SET @DESCUENTO =10
SET @MONTO_DESC = DBO.CALCULA_DESCUENTO(@NUM_RECIBO, @DESCUENTO)
PRINT @MONTO_DESC
UPDATE MATRICULA
SET DESCUENTO = @DESCUENTO
WHERE NUM_RECIBO =@NUM_RECIBO

UPDATE MATRICULA
SET DESCUENTO =0.10

SELECT* FROM MATRICULA

-------------------------------------------------------------------------------------------------
--03 Una función para calcular la suma del costo de LOS MODULOS matriculadas por estudiante del año actual.
GO
CREATE OR ALTER FUNCTION SUMA_COSTOS(@CARNET VARCHAR(10))
RETURNS DECIMAL(10,2)
AS
	BEGIN
		DECLARE @TOTAL_COSTOS DECIMAL
		SELECT @TOTAL_COSTOS = SUM(MD.COSTO) 
					FROM MATRICULA M INNER JOIN DETALLES_MATRICULA DM
							ON M.NUM_RECIBO = DM.NUM_RECIBO
							INNER JOIN MODULOS_ABIERTOS MA
								ON DM. COD_MODULO_ABIERTO = MA. COD_MODULO_ABIERTO
								INNER JOIN MODULOS_PROGRAMAS MP
								ON MA.ID_PROGRAMA_MODULO = MP.ID_PROGRAMA_MODULO
								INNER JOIN MODULOS MD
								ON MP.COD_MODULO = MD.COD_MODULO
								WHERE CARNET_ESTUDIANTE = @CARNET AND YEAR(FECHA)= 2023
		RETURN @TOTAL_COSTOS
	END

GO
DECLARE @TOTAL_COSTOS DECIMAL, @CARNET VARCHAR(6)
SET	@CARNET = 02
SET @TOTAL_COSTOS = dbo.SUMA_COSTOS(@CARNET) 
PRINT 'LA SUMA DE LOS COSTOS TOTALES DEL CARNET '+ @CARNET +' SON: '+ CAST(@TOTAL_COSTOS AS VARCHAR)

----------------------------------------------------------------------------------------------
--04 CREAR UNA FUNCION QUE CUENTE LA CANTIDAD DE CERTIFICADOS QUE POSEE CADA PROFESOR
GO
CREATE OR ALTER FUNCTION CANT_CERTIF(@COD_PROF VARCHAR(10))
RETURNS @CERTDE_PROF TABLE(NOMBRE VARCHAR(20), CERTIFICADOS INT)
AS
	BEGIN
	INSERT INTO @CERTDE_PROF

		SELECT NOMBRE_P, COUNT(P.COD_PROFESOR) AS CERTIFICADOS
		FROM PROFESORES P INNER JOIN CERTIFICADOS_PROFESORES CP
		ON P.COD_PROFESOR = CP.COD_PROFESOR
		WHERE CP.COD_PROFESOR=@COD_PROF
		GROUP BY NOMBRE_P
	RETURN
	END
GO
DECLARE @CANT_CERT INT, @COD_PROF VARCHAR(10)
DECLARE @NOMBRE_P VARCHAR(200)
SET @COD_PROF = 04
SET @CANT_CERT = dbo.CANT_CERTIF(@COD_PROF)
SELECT @NOMBRE_P = NOMBRE_P +' '+PRIMER_APELLIDO_P +' '+ SEGUNDO_APELLIDO_P 
FROM PROFESORES
WHERE COD_PROFESOR = @COD_PROF
PRINT 'ELPROFESOR ' + @NOMBRE_P +' POSE: ' + CAST(@CANT_CERT AS VARCHAR) + ' CERTIFICADOS'

GO

----------------------------------------------------------------------------------------------
--05 FUNCION QUE MUESTRE EL TOTAL DEL MONTO Y EL COSTO DE LOS ESTUDIUANTES MATRICULADOS
GO
CREATE OR ALTER FUNCTION TOTAL_MON_COST(@CARNET VARCHAR(10))
RETURNS @CANT_MONT_COST TABLE(NOMBRE VARCHAR(200),COD_MATERIA VARCHAR(20), COSTO_TOTAL INT, MONTO_TOTAL INT)
AS 
	BEGIN
		INSERT INTO @CANT_MONT_COST
		SELECT NOMBRE_ESTUDIANTE +' '+ SEGUNDO_APELLIDO_E+' '+ PRIMER_APELLIDO_E AS NOMBRE_ESTUDIANTE , MA.COD_MODULO_ABIERTO, SUM(COSTO), SUM(MONTO)
		FROM ESTUDIANTES E  INNER JOIN MATRICULA M
			ON E.CARNET_ESTUDIANTE = M.CARNET_ESTUDIANTE
			INNER JOIN DETALLES_MATRICULA DM
			ON M.NUM_RECIBO = DM.NUM_RECIBO
			INNER JOIN MODULOS_ABIERTOS MA
			ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
		WHERE E.CARNET_ESTUDIANTE =@CARNET
		GROUP BY NOMBRE_ESTUDIANTE,PRIMER_APELLIDO_E,SEGUNDO_APELLIDO_E,MA.COD_MODULO_ABIERTO
	RETURN
	END

GO
SELECT * FROM dbo.TOTAL_MON_COST('04')

----------------------------------------------------------------------------------------------
--06 FUNCION QUE MUESTRE LOS PROFESORES QUE PUEDEN IMPARTEN N MATERIA
GO
CREATE OR ALTER FUNCTION PROF_POR_MATERIA(@COD_MATTERIA VARCHAR(20))
RETURNS @PROF_POR_MATERIA TABLE(MATERIA VARCHAR(200),CODIGO_PROFESOR INT, NOMBRE_P VARCHAR(20), PRIMER_A_P VARCHAR(20))
AS
	BEGIN
		INSERT INTO @PROF_POR_MATERIA 
		SELECT NOMBRE_MODULO, P.COD_PROFESOR, NOMBRE_P, PRIMER_APELLIDO_P
		FROM PROFESORES P INNER JOIN MODULOS_ABIERTOS MA
			ON P.COD_PROFESOR= MA.COD_PROFESOR
			INNER JOIN MODULOS_PROGRAMAS MP
				ON MP.ID_PROGRAMA_MODULO = MA.ID_PROGRAMA_MODULO 
				INNER JOIN MODULOS MD
				ON MP.COD_MODULO = MD.COD_MODULO
		WHERE MD.COD_MODULO = @COD_MATTERIA
	RETURN
	END
GO
SELECT * FROM dbo.PROF_POR_MATERIA('CSS')

----------------------------------------------------------------------------------------------
--07 FUNCION QUE MUESTRE LOS ESTUDIANTES MATRICULADOS EN EL AÑO 2023
GO
CREATE OR ALTER FUNCTION ESTUD_POR_AÑO(@CARNET VARCHAR(10))
RETURNS @ESTU_POR_AÑO TABLE(CARNET VARCHAR(10),NOMBRE_E VARCHAR(200), NUM_RECIBO INT, ANIO DATE)
AS
	BEGIN
		INSERT INTO @ESTU_POR_AÑO
		SELECT E.CARNET_ESTUDIANTE, NOMBRE_ESTUDIANTE +' '+ PRIMER_APELLIDO_E AS NOMBRE_ESTUDIANTE, M.NUM_RECIBO,ANIO
		FROM ESTUDIANTES E INNER JOIN MATRICULA M
			ON E.CARNET_ESTUDIANTE = M.CARNET_ESTUDIANTE
				INNER JOIN DETALLES_MATRICULA DM
				ON M.NUM_RECIBO = DM.NUM_RECIBO
					INNER JOIN MODULOS_ABIERTOS MA
					ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
		WHERE E.CARNET_ESTUDIANTE = @CARNET AND YEAR(FECHA) = 2023

	RETURN
	END
GO
SELECT* FROM dbo.ESTUD_POR_AÑO('01')

----------------------------------------------------------------------------------------------
--08 FUNCION QUE MUESTRE LAS MATERIAS QUE NO HAN SIDO MATRICULADAS
GO
CREATE OR ALTER FUNCTION MAT_SIN_MATRI()
RETURNS @MAT_SIN_MATRI TABLE (NOMB_MAT VARCHAR(30), COD_MATERIA VARCHAR(20))
AS
	BEGIN
		INSERT INTO @MAT_SIN_MATRI
		SELECT NOMBRE_MODULO, MD.COD_MODULO
		FROM MODULOS_ABIERTOS MA RIGHT JOIN MODULOS_PROGRAMAS MP
			ON MA.ID_PROGRAMA_MODULO = MP.ID_PROGRAMA_MODULO
				INNER JOIN MODULOS MD
				ON MP.COD_MODULO = MD.COD_MODULO
		WHERE COD_MODULO_ABIERTO IS NULL
	RETURN
	END
GO

SELECT * FROM dbo.MAT_SIN_MATRI()

---------------------------------------------------------------------------------------------------------------------
--                                                  TRIGGERS
---------------------------------------------------------------------------------------------------------------------

--01 TRIGGER PARA REALIZAR UN BORRADO LOGICO SI SE ELMINA UN ESTUDIANTE UTILIZANDO UN ISTEAD OF
GO
CREATE OR ALTER TRIGGER TR_II_BORR_ESTU
ON ESTUDIANTES
INSTEAD OF DELETE
AS
	BEGIN
		DECLARE @CANET VARCHAR(10)
		SELECT @CANET = CARNET_ESTUDIANTE FROM DELETED 
		UPDATE	ESTUDIANTES
		SET BORRADO_E =1
		WHERE CARNET_ESTUDIANTE =@CANET
		PRINT 'EL ESTUDIANTE A SIDO ELIMINADO CORRECTAMENTE'
	END
DELETE FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE ='01'

----------------------------------------------------------------------------------------------

--02 TRIGGER QUE SE DISPARE AL ACTUALIZAR LA TABLA DETALLES MATRICULA SI EL MISMO ES 'REPR' EL ESTADO DE LA MATRICULA CAMBIARA A 'INAC'
GO
CREATE OR ALTER TRIGGER TR_IF_ACT_ESTADO
ON DETALLES_MATRICULA
FOR UPDATE
AS
	BEGIN
		DECLARE @NOTA VARCHAR(4), @NUM_RECIBO INT
		SELECT @NOTA = ESTADO_DM FROM inserted
		SELECT @NUM_RECIBO = NUM_RECIBO FROM inserted
		IF (@NOTA = 'REPR')
			UPDATE MATRICULA
			SET ESTADO_M = 'INAC'
			WHERE NUM_RECIBO =@NUM_RECIBO
	END
UPDATE DETALLES_MATRICULA
SET ESTADO_DM = 'REPR'
WHERE NUM_RECIBO = 12

----------------------------------------------------------------------------------------------
--03 TRIGGER QUE SE DISPARE CUANDO SE ACTUALIZE UN MODULO EL MISMO ACTUALIZARA LA DURACION DEL PROGRAMA
GO
CREATE OR ALTER TRIGGER TR_IF_ACTU_DURACION
ON MODULOS
FOR UPDATE
AS
	BEGIN
		DECLARE @DURAC_MOD INT, @COD_MOD VARCHAR(10)
		--DECLARE @DURAC_PROG INT
		SELECT @DURAC_MOD =  DURACION_MODULO FROM inserted
		SELECT @COD_MOD =  COD_MODULO FROM INSERTED
		UPDATE PROGRAMAS 
		SET DURACCION_PROGRAMA = DURACCION_PROGRAMA - @DURAC_MOD
	END
UPDATE MODULOS
SET DURACION_MODULO = 95
WHERE COD_MODULO = 'CSS'

----------------------------------------------------------------------------------------------
--04 TRIGER QUE SE DISPARE AL BORRAR UNA MATRICULA EN LUGAR DE BORRAR EJECUTARA UN BORRADO LOGICO
GO
CREATE OR ALTER TRIGGER TR_II_BORR_MAT_DET_MATR
ON MATRICULA
INSTEAD OF DELETE
AS
	BEGIN 
		DECLARE @NUM_RECIBO INT
		SELECT @NUM_RECIBO = NUM_RECIBO FROM deleted
		UPDATE MATRICULA
		SET BORRADO_M =1
		WHERE NUM_RECIBO = @NUM_RECIBO
		UPDATE DETALLES_MATRICULA
		SET BORRADO_DM =1
		WHERE NUM_RECIBO =@NUM_RECIBO
	END

	DELETE FROM MATRICULA WHERE NUM_RECIBO =12

----------------------------------------------------------------------------------------------
--05 TRIGGER QUE SE DISPARE  AL ACTUALIZAR UN MODULO EL COSTO DEL MODULO ABIERTO SE AUMENTARA UN 3% EN LA MATRICULA
GO
CREATE OR ALTER TRIGGER TR_MODULOS_ACTUALIZAR
ON MODULOS
AFTER UPDATE
AS
BEGIN
  DECLARE @COD_MOD VARCHAR(10)
  SELECT @COD_MOD = COD_MODULO FROM inserted
  UPDATE MODULOS_ABIERTOS
  SET COSTO = MODULOS_ABIERTOS.COSTO * 1.03
  FROM MODULOS_ABIERTOS
  INNER JOIN inserted ON MODULOS_ABIERTOS.COD_MODULO_ABIERTO = inserted.COD_MODULO
  INNER JOIN deleted ON inserted.COD_MODULO = deleted.COD_MODULO
  WHERE INSERTED.COD_MODULO =@COD_MOD
END

UPDATE MODULOS
SET COSTO =190000
WHERE COD_MODULO ='BOOTSTRAP'

----------------------------------------------------------------------------------------------
--06 TRIGGER QUE SE DISPARE AL INSERTAR  UN ESTUDIANTE NUEVO LLENARA LA MATRICULA SEGUN EL MODULO QUE ELIJA
GO
CREATE OR ALTER TRIGGER TR_MATRICULA_NUEVA
ON ESTUDIANTES
FOR INSERT
AS
BEGIN
  DECLARE @CARNET VARCHAR(10), @DESCUENTO INT
  SELECT @CARNET = CARNET_ESTUDIANTE FROM inserted
  SELECT @DESCUENTO = DESCUENTO FROM MATRICULA
  INSERT INTO MATRICULA(NUM_RECIBO, CARNET_ESTUDIANTE, FECHA, MONTO, DESCUENTO)
  VALUES (12345,@CARNET,GETDATE(),100000,@DESCUENTO)
END

INSERT INTO ESTUDIANTES(CARNET_ESTUDIANTE, NOMBRE_ESTUDIANTE, PRIMER_APELLIDO_E,SEGUNDO_APELLIDO_E,CEDULA_E, TELEFONO_E, EMAIL_E, DIRECCION_E, PROVINCIA_E, CANTON_E, DISTRITO_E)
	VALUES('11', 'DERICK', 'GUTIERREZ', 'MEJIAS', '2703', '8525-6525', 'DERICK@GMAIL.COM','PULPERIA','ALAJUELA', 'SAN CARLOS', 'QUESADA')

----------------------------------------------------------------------------------------------
--07 TRIGGER QUE HAGA UN BORRADO LOGICO EN LA TABLA MODULOS ABIERTOS
GO
CREATE OR ALTER TRIGGER TR_II_BORR_LOG_MOD_ABRT
ON MODULOS_ABIERTOS	
INSTEAD OF DELETE
AS
	BEGIN
		DECLARE @COD_MOD_ABI VARCHAR (10)
		SELECT @COD_MOD_ABI =COD_MODULO_ABIERTO FROM deleted
		UPDATE MODULOS_ABIERTOS
		SET BORRADO_MOD_ABRT=1
		WHERE COD_MODULO_ABIERTO = @COD_MOD_ABI
	END

DELETE FROM MODULOS_ABIERTOS WHERE COD_MODULO_ABIERTO = 'INA01'

-----------------------------------------------------------------------------------------------------------------
--                                    SP PARA ABRIR UN MODULO
-----------------------------------------------------------------------------------------------------------------

GO
CREATE OR ALTER PROCEDURE sp_ABRIR_MODULO
    @COD_MODULO VARCHAR(10),
    @DIAS VARCHAR(50),
    @HORA_INICIO TIME,
    @HORA_FIN TIME,
    @COD_PROFESOR INT,
    @COD_LAB VARCHAR(10),
    @FECHA_INICIO DATE,
	@NOMBRE_MODULO VARCHAR(30)
AS
BEGIN
    -- Variable para almacenar la fecha de finalización
    DECLARE @FECHA_FIN DATE

    -- Verificar que el profesor no tenga choque de horario
    IF EXISTS (
          SELECT 1
        FROM MODULOS M
        INNER JOIN MODULOS_PROGRAMAS MP
			ON M.COD_MODULO = MP.COD_MODULO
				INNER JOIN MODULOS_ABIERTOS MA
					ON MP.ID_PROGRAMA_MODULO = MA.ID_PROGRAMA_MODULO
					INNER JOIN HORARIOS H
					ON MA.COD_MODULO_ABIERTO =H.COD_MODULO_ABIERTO
        WHERE MA.COD_PROFESOR = @COD_PROFESOR
        AND H.DIA= @DIAS
        AND ((h.HORA_INICIO <= @HORA_INICIO AND h.HORA_FIN >= @HORA_INICIO) OR (h.HORA_INICIO <= @HORA_FIN AND h.HORA_FIN >= @HORA_FIN))
    )
    BEGIN
        RAISERROR('El profesor tiene choque de horario', 16, 1)
        RETURN
    END

    -- Verificar que el laboratorio no tenga choque de horario
    IF EXISTS (
        SELECT 1
        FROM MODULOS M
        INNER JOIN MODULOS_PROGRAMAS MP
			ON M.COD_MODULO = MP.COD_MODULO
				INNER JOIN MODULOS_ABIERTOS MA
					ON MP.ID_PROGRAMA_MODULO = MA.ID_PROGRAMA_MODULO
					INNER JOIN HORARIOS H
					ON MA.COD_MODULO_ABIERTO =H.COD_MODULO_ABIERTO
        WHERE H.COD_LABORATORIO = @COD_LAB
        AND H.DIA =@DIAS
        AND ((h.HORA_INICIO <= @HORA_INICIO AND h.HORA_FIN >= @HORA_INICIO) OR (h.HORA_INICIO <= @HORA_FIN AND h.HORA_FIN >= @HORA_FIN)))
    BEGIN
        RAISERROR('El laboratorio tiene choque de horario', 16, 1)
        RETURN
    END

    -- Insertar los datos en la tabla Modulos
    INSERT INTO MODULOS(COD_MODULO, NOMBRE_MODULO, DURACION_MODULO, COSTO)
    VALUES (@COD_MODULO,'BOOTSTRAP_2', 80, 165000)

    -- Calcular la fecha de finalización
    SET @FECHA_FIN = DATEADD(DAY, (SELECT DURACION_MODULO FROM MODULOS WHERE COD_MODULO= @COD_MODULO) - 1, @FECHA_INICIO)

    -- Insertar los datos en la tabla Horarios
    INSERT INTO HORARIOS(COD_MODULO_ABIERTO,COD_LABORATORIO, DIA, HORA_INICIO, HORA_FIN)
    SELECT 'INA10',@COD_LAB, value, @HORA_INICIO, @HORA_FIN
    FROM STRING_SPLIT(@DIAS, ',')

    -- Actualizar la fecha de finalización en la tabla Modulos
    UPDATE MODULOS_ABIERTOS SET ANIO = @FECHA_FIN WHERE COD_MODULO_ABIERTO = @COD_MODULO
END
GO
USE [DERICK_GUTIERREZ_PROYECTOBD_FASE3]
GO

DECLARE	@return_value int

EXEC	@return_value = [dbo].[sp_ABRIR_MODULO]
		@COD_MODULO = 'CSS5',
		@DIAS = N'''LUNES''',
		@HORA_INICIO = '8:00:00',
		@HORA_FIN = '12:00:00',
		@COD_PROFESOR = 2,
		@COD_LAB = 'LAB03',
		@FECHA_INICIO = '20230117',
		@NOMBRE_MODULO = N'''BOOTSTRAP_2'''

SELECT	'Return Value' = @return_value

GO

-----------------------------------------------------------------------------------------------------------------
--                                    SP PARA REALIZAR UNA MATRICULA
-----------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_MATRICULAR_ESTUDIANTE
     @CARNET_ESTUD VARCHAR(10),
    @CODIGO_MODULO VARCHAR(10)	
AS
BEGIN
	DECLARE @HORA_FIN TIME
	SELECT @HORA_FIN = HORA_FIN
        FROM MATRICULA M INNER JOIN DETALLES_MATRICULA DM ON M.NUM_RECIBO =DM.NUM_RECIBO
							INNER JOIN  MODULOS_ABIERTOS MA ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
							INNER JOIN HORARIOS H ON MA. COD_MODULO_ABIERTO= H.COD_MODULO_ABIERTO
        WHERE M.CARNET_ESTUDIANTE = @CARNET_ESTUD

	DECLARE @HORA_INICIO TIME
	SELECT @HORA_INICIO = HORA_INICIO
        FROM MATRICULA M INNER JOIN DETALLES_MATRICULA DM ON M.NUM_RECIBO =DM.NUM_RECIBO
							INNER JOIN  MODULOS_ABIERTOS MA ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
							INNER JOIN HORARIOS H ON MA. COD_MODULO_ABIERTO= H.COD_MODULO_ABIERTO
        WHERE M.CARNET_ESTUDIANTE = @CARNET_ESTUD

	DECLARE @DIAS VARCHAR(50)
	SELECT @DIAS = DIA
        FROM MATRICULA M INNER JOIN DETALLES_MATRICULA DM ON M.NUM_RECIBO =DM.NUM_RECIBO
							INNER JOIN  MODULOS_ABIERTOS MA ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
							INNER JOIN HORARIOS H ON MA. COD_MODULO_ABIERTO= H.COD_MODULO_ABIERTO
        WHERE M.CARNET_ESTUDIANTE = @CARNET_ESTUD

	DECLARE @COD_MOD_ABIERT VARCHAR(10)
	SELECT @COD_MOD_ABIERT = COD_MODULO_ABIERTO FROM MODULOS_ABIERTOS MA INNER JOIN MODULOS_PROGRAMAS MP
													ON MA.ID_PROGRAMA_MODULO = MP.ID_PROGRAMA_MODULO
														INNER JOIN MODULOS MD
															ON MP.COD_MODULO =MD.COD_MODULO
															WHERE MD.COD_MODULO = @CODIGO_MODULO
    -- Verificar si el módulo está abierto para matrícula
    IF NOT EXISTS (SELECT 1 FROM MODULOS M INNER JOIN MODULOS_PROGRAMAS MP
											ON M. COD_MODULO = MP.COD_MODULO
												INNER JOIN MODULOS_ABIERTOS MA
												ON MP. ID_PROGRAMA_MODULO = MA. ID_PROGRAMA_MODULO
					WHERE COD_MODULO_ABIERTO= @COD_MOD_ABIERT )
    BEGIN
        RAISERROR('El módulo seleccionado no está abierto para matrícula', 16, 1)
        RETURN
    END
	SELECT* FROM MODULOS_ABIERTOS
    -- Verificar si el estudiante tiene choque de horario con otros módulos matriculados
    IF EXISTS (
        SELECT 1
        FROM MATRICULA M INNER JOIN DETALLES_MATRICULA DM ON M.NUM_RECIBO =DM.NUM_RECIBO
							INNER JOIN  MODULOS_ABIERTOS MA ON DM.COD_MODULO_ABIERTO = MA.COD_MODULO_ABIERTO
							INNER JOIN HORARIOS H ON MA. COD_MODULO_ABIERTO= H.COD_MODULO_ABIERTO
        WHERE M.CARNET_ESTUDIANTE = @CARNET_ESTUD
       AND H.DIA =@DIAS
        AND ((h.HORA_INICIO <= @HORA_INICIO AND h.HORA_FIN >= @HORA_INICIO) OR (h.HORA_INICIO <= @HORA_FIN AND h.HORA_FIN >= @HORA_FIN)))
    BEGIN
        RAISERROR('El estudiante tiene choque de horario con otro módulo matriculado', 16, 1)
        RETURN
    END
	INSERT INTO MATRICULA(CARNET_ESTUDIANTE, NUM_RECIBO, FECHA,MONTO, DESCUENTO) VALUES (@CARNET_ESTUD, 2542, GETDATE(),170000, 0.10)
END
GO

DECLARE	@return_value int

EXEC	@return_value = [dbo].[SP_MATRICULAR_ESTUDIANTE]
		@CARNET_ESTUD = N'''11''',
		@CODIGO_MODULO = N'''CSS3'''

SELECT	'Return Value' = @return_value

GO

/*
CREATE OR ALTER PROCEDURE CREAR_MOD_MODULO(@COD_MOD VARCHAR(10),@DIAS VARCHAR(10), @HORA_INICIO TIME, @HORA_FIN TIME, @COD_LAB VARCHAR(10) , @FECHA DATE, @MSJ VARCHAR(200)OUT)

AS
	BEGIN TRY
		BEGIN TRAN
		DECLARE @BANDERA INT
		SET @BANDERA =0
--Se verifica que el profesor no tenga choque de horario
		DECLARE C_HOR_PR CURSOR FOR
		SELECT HORA_INICIO, HORA_FIN, DIA
		FROM HORARIOS
		WHERE COD_MODULO_ABIERTO = @COD_MOD

		OPEN C_HOR_PR

		FETCH C_HOR_PR INTO @HORA_INICIO, @HORA_FIN, @DIAS
		WHILE (@@FETCH_STATUS =0)
			BEGIN
				IF (EXISTS( SELECT 1 
							FROM PROFESORES P INNER JOIN MODULOS_ABIERTOS MA
								ON P.COD_PROFESOR = MA. COD_PROFESOR
									INNER JOIN HORARIOS H 
										ON MA.COD_MODULO_ABIERTO = H.COD_MODULO_ABIERTO
							WHERE H.COD_MODULO_ABIERTO= @COD_MOD AND DIA = @DIAS
							AND HORA_INICIO BETWEEN @HORA_INICIO AND @HORA_FIN
							OR HORA_FIN BETWEEN @HORA_INICIO AND @HORA_FIN
							AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FIN
							OR @HORA_FIN BETWEEN HORA_INICIO AND HORA_FIN))
					BEGIN
						SET @MSJ= 'ESTE HORARIO PRESENTA CHOQUES CON LOS YA DADOS POR EL DOCENTE'
						SET @BANDERA =0
					END
				ELSE
					BEGIN
						SET @BANDERA =1
					END
				FETCH C_HOR_PR INTO @HORA_INICIO, @HORA_FIN, @DIAS
			END
			CLOSE C_HOR_PR
			DEALLOCATE C_HOR_PR

	    --	Se le asigna los días en que se va a impartir el módulo
		--	Se le asignan las horas de inicio y fin por día
			IF( NOT EXISTS(SELECT 1 FROM MODULOS_ABIERTOS WHERE COD_MODULO_ABIERTO = @COD_MOD)AND @BANDERA =1 )
				BEGIN
					INSERT INTO  HORARIOS(COD_MODULO_ABIERTO, DIA, HORA_INICIO, HORA_FIN)
						VALUES (@COD_MOD, @DIAS,@HORA_INICIO,@HORA_FIN)
					SET @MSJ = 'EL HORARIO SE CREO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					UPDATE HORARIOS
					SET DIA =@DIAS, HORA_INICIO =@HORA_INICIO, HORA_FIN =@HORA_FIN
					WHERE COD_MODULO_ABIERTO =@COD_MOD
					SET @MSJ = 'EL HORARIO SE ACTUALIZO SATISFACTORIAMENTE'
				END
	--	Se verifica que el laboratorio no tenga choque de horario

	DECLARE C_HOR_LB CURSOR FOR
		SELECT HORA_INICIO, HORA_FIN, DIA
		FROM HORARIOS
		WHERE COD_LABORATORIO = @COD_LAB

		OPEN C_HOR_LB

		FETCH C_HOR_LB INTO @HORA_INICIO, @HORA_FIN, @DIAS
		WHILE (@@FETCH_STATUS =0)
			BEGIN
				IF (EXISTS( SELECT 1 
							FROM HORARIOS
							WHERE COD_LABORATORIO= @COD_LAB AND DIA = @DIAS
							AND HORA_INICIO BETWEEN @HORA_INICIO AND @HORA_FIN
							OR HORA_FIN BETWEEN @HORA_INICIO AND @HORA_FIN
							AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FIN
							OR @HORA_FIN BETWEEN HORA_INICIO AND HORA_FIN))
					BEGIN
						SET @MSJ = 'ESTE HORARIO PRESENTA CHOQUES CON LOS QUE YA POSEE EL LABORATORIO'
						SET @BANDERA =0
					END
				ELSE
					BEGIN
						SET @BANDERA =1
					END
				FETCH C_HOR_LB INTO @HORA_INICIO, @HORA_FIN, @DIAS
			END
			CLOSE C_HOR_LB
			DEALLOCATE C_HOR_LB
			--	Se le asigna un laboratorio
			IF( NOT EXISTS(SELECT 1 FROM MODULOS_ABIERTOS WHERE COD_MODULO_ABIERTO = @COD_MOD)AND @BANDERA =1 )
				BEGIN
					INSERT INTO  HORARIOS(COD_LABORATORIO)
						VALUES (@COD_LAB)
					SET @MSJ = 'EL HORARIO SE CREO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					UPDATE HORARIOS
					SET COD_LABORATORIO =@COD_LAB
					WHERE COD_MODULO_ABIERTO =@COD_MOD
					SET @MSJ = 'EL HORARIO SE ACTUALIZO SATISFACTORIAMENTE'
				END

			--	Se le asigna la fecha de inicio del módulo
			IF( NOT EXISTS(SELECT 1 FROM MODULOS_ABIERTOS WHERE COD_MODULO_ABIERTO = @COD_MOD)AND @BANDERA =1 )
				BEGIN
					INSERT INTO  MODULOS_ABIERTOS(ANIO)
						VALUES (@FECHA)
					SET @MSJ = 'LA FECHA DE INICIO FUE CREADA Y SU FECHA FIN SERA: '
				END
			ELSE
				BEGIN
					UPDATE MODULOS_ABIERTOS
					SET ANIO =@FECHA
					WHERE COD_MODULO_ABIERTO =@COD_MOD
					SET @MSJ = 'LA FECHA DE INICIO FUE CREADA Y SU FECHA FIN SERA: '
				END

		COMMIT TRAN
	END TRY
	BEGIN CATCH
      ROLLBACK TRAN
                    SET @MSJ = ERROR_MESSAGE()
   END CATCH
GO 

SELECT * FROM HORARIOS
SELECT* FROM ESTUDIANTES
SELECT * FROM MATRICULA 
SELECT * FROM DETALLES_MATRICULA
SELECT * FROM MODULOS_ABIERTOS
SELECT* FROM PROGRAMAS
SELECT * FROM MODULOS 
DROP TABLE CERTIFICADOS_PROFESORES
DROP TABLE DETALLES_MATRICULA
DROP TABLE HORARIOS
DROP TABLE MATRICULA
DROP TABLE MODULOS
DROP TABLE MODULOS_ABIERTOS
DROP TABLE MODULOS_PROGRAMAS
DROP TABLE PROGRAMAS
DROP TABLE ESTUDIANTES
DROP TABLE PROFESORES
 
  */